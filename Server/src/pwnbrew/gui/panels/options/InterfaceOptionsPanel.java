/*

Copyright (C) 2013-2014, Securifera, Inc 

All rights reserved. 

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
	this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
	this list of conditions and the following disclaimer in the documentation 
	and/or other materials provided with the distribution.

    * Neither the name of Securifera, Inc nor the names of its contributors may be 
	used to endorse or promote products derived from this software without specific
	prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

================================================================================

Pwnbrew is provided under the 3-clause BSD license above.

The copyright on this package is held by Securifera, Inc

*/

package pwnbrew.gui.panels.options;

import java.awt.Color;
import pwnbrew.gui.panels.PanelListener;
import java.io.File;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static pwnbrew.Environment.addClassToMap;
import pwnbrew.generic.gui.GenericProgressDialog;
import pwnbrew.log.LoggableException;
import pwnbrew.misc.Constants;
import pwnbrew.misc.Directories;
import pwnbrew.misc.FileFilterImp;
import pwnbrew.misc.ProgressDriver;
import pwnbrew.misc.ProgressListener;
import pwnbrew.utilities.FileUtilities;
import pwnbrew.utilities.GuiUtilities;
import pwnbrew.utilities.Utilities;
import pwnbrew.xmlBase.JarItem;
import pwnbrew.xmlBase.JarItemException;

/**
 *
 */
public class InterfaceOptionsPanel extends OptionsJPanel implements ProgressDriver, JarTableListener {

    private JFileChooser theJarChooser = null;    
    private final FileFilterImp theJarFilter = new FileFilterImp();
    private static final String JAR_EXT = "jar";
    private JarTable theJarTable;
    
    private static final String NAME_Class = InterfaceOptionsPanel.class.getSimpleName();
    

    //===================================================================
    /** Creates new form AdvancedlOptionsPanel
     * @param parent
     * @throws pwnbrew.logging.LoggableException */
    public InterfaceOptionsPanel( PanelListener parent ) throws LoggableException {
        super( "JAR Library", parent );
        initComponents();
        initializeComponents();
    }

    //===================================================================
    /**
     * Initialize components
    */
    private void initializeComponents() throws LoggableException{

        //Create a JFileChooser to select wim files...
        theJarFilter.addExt( JAR_EXT);
        theJarChooser = new JFileChooser();
        theJarChooser.setMultiSelectionEnabled(false);
        theJarChooser.setFileFilter(theJarFilter);
            
        
        GuiUtilities.setComponentIcon(addFile,  15, 15, Constants.ADD_IMAGE_STR);
        GuiUtilities.setComponentIcon(removeFile, 15, 15, Constants.DELETE_IMG_STR);
        
        //Create a file table
        theJarTable = new JarTable( this );
        jarScrollPane.setViewportView(theJarTable);
        jarScrollPane.getViewport().setBackground(Color.WHITE);
        
        List<JarItem> jarList = new ArrayList<>();
        jarList.addAll( Utilities.getJarItems());
        
        //Get the table model
        DefaultTableModel theModel = (DefaultTableModel) theJarTable.getModel();
        for( JarItem anItem : jarList )
            theModel.addRow( new Object[]{ anItem, anItem.getType(), 
                anItem.getJvmMajorVersion(), anItem.getVersion() });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        removeFile = new javax.swing.JButton();
        addFile = new javax.swing.JButton();
        jarScrollPane = new javax.swing.JScrollPane();

        removeFile.setText(" ");
        removeFile.setIconTextGap(0);
        removeFile.setMargin(new java.awt.Insets(2, 2, 2, 2));
        removeFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFileActionPerformed(evt);
            }
        });

        addFile.setText(" ");
        addFile.setIconTextGap(0);
        addFile.setMargin(new java.awt.Insets(2, 2, 2, 2));
        addFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 209, Short.MAX_VALUE)
                        .addComponent(addFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeFile)
                        .addGap(0, 209, Short.MAX_VALUE))
                    .addComponent(jarScrollPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jarScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addFile)
                    .addComponent(removeFile))
                .addContainerGap(96, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void removeFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFileActionPerformed
        int[] selRowIndexes = theJarTable.getSelectedRows();
        for( int anInt : selRowIndexes )   
            deleteJarItem(anInt);
    }//GEN-LAST:event_removeFileActionPerformed

    private void addFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileActionPerformed
        selectJar();
    }//GEN-LAST:event_addFileActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFile;
    private javax.swing.JScrollPane jarScrollPane;
    private javax.swing.JButton removeFile;
    // End of variables declaration//GEN-END:variables

    //===================================================================
    /**
     * Saves any changes that have been performed
    */
    @Override
    public void saveChanges(){
        //Reset the dirty flag
        setDirtyFlag(false);
    }
    
    // ==========================================================================
    /**
    * Selects the client jar.
    */
    private void selectJar() {
        
            File userSelectedFile = null;

            int returnVal = theJarChooser.showDialog( this, "Select JAR File" ); //Show the dialogue
            switch( returnVal ) {

               case JFileChooser.CANCEL_OPTION: //If the user canceled the selecting...
                  break;
               case JFileChooser.ERROR_OPTION: //If the dialogue was dismissed or an error occurred...
                  break; //Do nothing

               case JFileChooser.APPROVE_OPTION: //If the user approved the selection...
                  userSelectedFile = theJarChooser.getSelectedFile(); //Get the files the user selected
                  break;
               default:
                  break;

            }

            //Check if the returned file is valid
            if(userSelectedFile == null  || userSelectedFile.isDirectory() || !userSelectedFile.canRead()){
                return;
            }
            
            //Create a JarItem
            JarItem aJarItem;
            try {
                aJarItem = Utilities.getJavaItem( userSelectedFile );
            } catch (JarItemException ex) {
                JOptionPane.showMessageDialog( this, ex.getMessage(),"Error", JOptionPane.ERROR_MESSAGE );           
                return;
            }


            //See if the table already contains the entry
            DefaultTableModel theModel = (DefaultTableModel) theJarTable.getModel();
            JarItem currentItem = null;
            int rowToDelete = -1;
            for( int i =0; i < theModel.getRowCount(); i++ ){

                //Set the JarItem
                currentItem = (JarItem)theModel.getValueAt(i, 0);

                //Check if the jvm version is the same first
                if( aJarItem.getJvmMajorVersion().equals(currentItem.getJvmMajorVersion()) && 
                        aJarItem.getType().equals( currentItem.getType()) ){

                    //Only one Stager and Payload are allowed
                    if( aJarItem.getType().equals(JarItem.STAGER_TYPE) || aJarItem.getType().equals(JarItem.PAYLOAD_TYPE)){
                        rowToDelete = i;
                        break;
                    //Check if one with the same name exists
                    } else if( aJarItem.getName().equals(currentItem.getName() )) {
                        rowToDelete = i;
                        break;
                    }

                }

                //Reset value
                currentItem = null;
            }

            //If a similar library already exist
            if( currentItem != null ){                        
                String theMessage = new StringBuilder("Would you like to replace the existing ")
                        .append(currentItem.getType()).append(" named \"")
                        .append(currentItem.getName()).append("\" versioned \"")
                        .append(currentItem.getVersion()).append("\"?").toString();
                int dialogValue = JOptionPane.showConfirmDialog(this, theMessage, "Replace JAR Library?", JOptionPane.YES_NO_OPTION);

                //Add the JAR to utilities
                if ( dialogValue == JOptionPane.YES_OPTION ){
                    deleteJarItem(rowToDelete);                    
                } else {
                    return;
                }
            }
            
            //Create a list out of the array
            List theObjList = new ArrayList();
            theObjList.add(userSelectedFile);
            theObjList.add(aJarItem);

            GenericProgressDialog pDialog = new GenericProgressDialog(null, "Importing files to library...", this, false, theObjList);
            pDialog.setVisible(true);       
//        } 
                
    }/* END selectJar() */

    //========================================================================
    /**
     * 
     * @param progressListener
     * @param theObjList
     * @return 
     */
    @Override
    public String executeFunction(ProgressListener progressListener, List<?> theObjList) {
        
        String retVal = null;
        if( theObjList != null ) { //If the user selected any files...
            
            File aFile = (File)theObjList.get(0);
            JarItem aJarItem = (JarItem)theObjList.get(1);                    

            try {

                //Add the jar
                Utilities.addJarItem( aJarItem );

                //Write the file to disk
                String fileHash = FileUtilities.createHashedFile( aFile, progressListener );
                if( fileHash != null ) {

                    //Create a FileContentRef
                    aJarItem.setFileHash( fileHash ); //Set the file's hash

                    //Write to disk
                    aJarItem.writeSelfToDisk();

                    DefaultTableModel theModel = (DefaultTableModel) theJarTable.getModel();
                    theModel.addRow( new Object[]{ aJarItem, 
                            aJarItem.getType(), aJarItem.getJvmMajorVersion(), aJarItem.getVersion() });

                    //If it is a local extension then load it
                    if( aJarItem.getType().equals(JarItem.LOCAL_EXTENSION_TYPE)){

                        //Load the jar
                        File libraryFile = new File( Directories.getFileLibraryDirectory(), aJarItem.getFileHash() ); //Create a File to represent the library file to be copied
                        List<Class<?>> theClasses = Utilities.loadJar(libraryFile);
                        for( Class aClass : theClasses )
                            addClassToMap(aClass);                            
                    }

                } 

            } catch ( NoSuchAlgorithmException | IOException ex) {
                JOptionPane.showMessageDialog( this, ex.getMessage(), "Could not import the JAR library.", JOptionPane.ERROR_MESSAGE );
                retVal = "Could not import the JAR library.";
            }
            
        }
        return retVal;
    }

    //========================================================================
    /**
     * Delete the file
     * 
     * @param anInt 
     */
    @Override
    public void deleteJarItem(int anInt ) {
        
        //Get the model and remove the item
        DefaultTableModel theTableModel = (DefaultTableModel) theJarTable.getModel();    
        JarItem aJarItem = (JarItem)theTableModel.getValueAt(anInt, 0);
        theTableModel.removeRow(anInt);
                    
        Utilities.removeJarItem(aJarItem);
        aJarItem.deleteSelfFromDirectory( new File( Directories.getJarLibPath() ));
        aJarItem.deleteFileContentFromLibrary();
                
    }
    
}
