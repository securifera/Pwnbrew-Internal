/*

Copyright (C) 2013-2014, Securifera, Inc 

All rights reserved. 

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
	this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
	this list of conditions and the following disclaimer in the documentation 
	and/or other materials provided with the distribution.

    * Neither the name of Securifera, Inc nor the names of its contributors may be 
	used to endorse or promote products derived from this software without specific
	prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

================================================================================

Pwnbrew is provided under the 3-clause BSD license above.

The copyright on this package is held by Securifera, Inc

*/


/*
 * NetworkOptionsPanel.java
 *
 * Created on Sept 10, 2013, 8:19:22 PM
 */

package pwnbrew.gui.panels.options;

import pwnbrew.gui.panels.PanelListener;
import pwnbrew.xmlBase.ServerConfig;
import java.awt.Color;
import java.util.logging.Level;
import javax.swing.*;
import pwnbrew.logging.Log;
import pwnbrew.logging.LoggableException;
import pwnbrew.misc.FileFilterImp;
import pwnbrew.exception.NoSuchValidationException;
import pwnbrew.gui.dialogs.OptionsJDialog;
import pwnbrew.gui.dialogs.OptionsJDialogListener;
import pwnbrew.validation.StandardValidation;

/**
 *
 */
public class NetworkOptionsPanel extends OptionsJPanel {

    private JFileChooser theCertificateChooser = null;
    private ServerConfig theConf = null;
    private final FileFilterImp theCertFilter = new FileFilterImp();
    
    private volatile boolean reloadSSL = false;
    private volatile boolean recreateSockets = false;
    
    private static final String P12_EXT = "p12"; 
    private static final String NAME_Class = NetworkOptionsPanel.class.getSimpleName();

    //===============================================================
    /**
     *  Constructor
     * @param parent
     * @throws pwnbrew.logging.LoggableException
    */
    public NetworkOptionsPanel( PanelListener parent ) throws LoggableException {
        super( "Network", parent );
        initComponents();
        initializeComponents();
    }

    //===============================================================
    /**
     * Initialize components
    */
    private void initializeComponents() throws LoggableException{

       theConf = ServerConfig.getServerConfig();

       //Populate the componenets
       if(theConf != null){
          ctrlPortField.setText(Integer.toString(theConf.getControlPort()));
       }

       //Create a JFileChooser to select wim files...
       theCertFilter.addExt( P12_EXT);
       theCertificateChooser = new JFileChooser();
       theCertificateChooser.setMultiSelectionEnabled(false);
       theCertificateChooser.setFileFilter(theCertFilter);
       
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        portPanel = new javax.swing.JPanel();
        ctrlPortField = new javax.swing.JTextField();
        dataPortLabel = new javax.swing.JLabel();
        ctrlPortLabel = new javax.swing.JLabel();
        dataPortField = new javax.swing.JTextField();

        portPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Comms"));

        ctrlPortField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ctrlPortField.setMargin(new java.awt.Insets(4, 4, 4, 4));
        ctrlPortField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ctrlPortFieldKeyReleased(evt);
            }
        });

        ctrlPortLabel.setText("Port:");

        javax.swing.GroupLayout portPanelLayout = new javax.swing.GroupLayout(portPanel);
        portPanel.setLayout(portPanelLayout);
        portPanelLayout.setHorizontalGroup(
            portPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(portPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ctrlPortLabel)
                .addGap(18, 18, 18)
                .addComponent(ctrlPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );
        portPanelLayout.setVerticalGroup(
            portPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(portPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(portPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ctrlPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ctrlPortLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(portPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(154, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(portPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(159, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ctrlPortFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ctrlPortFieldKeyReleased
        evaluateValue(ctrlPortField);
        setSaveButton(true);
    }//GEN-LAST:event_ctrlPortFieldKeyReleased

    private void dataPortFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dataPortFieldKeyReleased
        evaluateValue(dataPortField);
        setSaveButton(true);
    }//GEN-LAST:event_dataPortFieldKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ctrlPortField;
    private javax.swing.JLabel ctrlPortLabel;
    private javax.swing.JTextField dataPortField;
    private javax.swing.JLabel dataPortLabel;
    private javax.swing.JPanel portPanel;
    // End of variables declaration//GEN-END:variables


     // ==========================================================================
    /**
     * Evaluates the current value in the {@link JTextField}.
     * <p>
     * If the value is a valid port this method sets the background of th
     * field to white; otherwise the background color is set to red.
     *
     */
    private boolean evaluateValue(JTextField passedField) {

        String value = passedField.getText(); //Get the value
        boolean dataIsValid = false;

        try {
           dataIsValid = StandardValidation.validate( StandardValidation.KEYWORD_Port, value );
        } catch( NoSuchValidationException ex ) {
            //This case won't occur.
           ex = null;
        } catch( LoggableException ex ) {
           Log.log(Level.WARNING, NAME_Class, "evaluateValue()", ex.getMessage(), ex );
        }

        //Set the backgroun color of the text field...
        if( dataIsValid ){ //If the data is valid...
           passedField.setBackground(Color.WHITE);
        } else {//If the data is not valid...
           passedField.setBackground(Color.RED);
        }

        return dataIsValid;


    }/* END evaluateValue() */

    //===============================================================
    /**
     *  Check if the SSL contexts needs reloading.
     * @return 
    */
    public boolean shouldReloadSSL() {
       return reloadSSL;
    }
    
    //===============================================================
    /**
     *  Set the SSL reload context flag.
     * @param passedBool
    */
    public void setReloadSslFlag( boolean passedBool ) {
        reloadSSL = passedBool;
    }
    
    //===============================================================
    /**
     * Check if the server sockets need reloading.
     * @return 
    */
    public boolean shouldRecreateSockets() {
       return recreateSockets;
    }
    
     //===============================================================
    /**
     *  Set the socket recreation flag.
     * @param passedBool
    */
    public void setSocketRecreateFlag( boolean passedBool ) {
        recreateSockets = passedBool;
    }
    
//    //===============================================================
//    /**
//     * Saves any changes that have been performed
//     * @return 
//    */
//    public boolean isDirty() {
//       return dirtyFlag;
//    }

//    //===============================================================
//    /**
//    * Sets the save button enablement
//     * @param passedBool
//    */
//    public void setSaveButton(boolean passedBool){
//       if(!isDirty()){
//          setDirtyFlag( true );
//          theListener.valueChanged(passedBool);
//       }
//    }


    //===============================================================
    /**
     * Saves any changes that have been performed
    */
    @Override
    public void saveChanges(){

        //Reset the dirty flag
        setDirtyFlag( false );

        //Write the changes to disk
        try {
            if(theConf != null){

                String ctrlPortStr = ctrlPortField.getText();
                    
                //Ensure the ports are valid
                if(evaluateValue(ctrlPortField) ){

                    //See if things should be saved
                    if(theConf.getControlPort() != Integer.parseInt(ctrlPortStr) ){
                        theConf.setControlPort(ctrlPortStr);
                        theConf.setDataPort(ctrlPortStr);
                        recreateSockets = true;
                    }

                } else {

                   JOptionPane.showMessageDialog( this, "The control port is invalid.","Error", JOptionPane.ERROR_MESSAGE );

                }
                
                //Write to disk
                theConf.writeSelfToDisk();
            }

        } catch (LoggableException ex) {
           Log.log(Level.SEVERE, NAME_Class, "saveChanges()", ex.getMessage(), ex );
        } catch (IllegalArgumentException ex){
           JOptionPane.showMessageDialog( this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );          
        }

    }
    
    //===============================================================
    /**
     * 
     */
    @Override
    public void doClose() {   
    
        OptionsJDialog theDialog = (OptionsJDialog)theListener;
        OptionsJDialogListener theDialogListener = theDialog.getDialogListener();
        
        //If a change was made to the ssl configuration
        if( shouldReloadSSL() ){
            //Reload the ssl context
            theDialogListener.reloadSSLContext();               
            setReloadSslFlag( false );
        }

         //If a change was made to the socket ports
        if( shouldRecreateSockets() ){

            try {
                
                //Reload the ssl context
                if( !theDialogListener.recreateSockets() ) { 
                    return;
                }         
                setSocketRecreateFlag(false );

            } catch (LoggableException ex) {
                JOptionPane.showMessageDialog( this, ex.getMessage(),
                        "Could not create sockets.", JOptionPane.ERROR_MESSAGE );
            }                      

        }
    }


}
