/*

Copyright (C) 2013-2014, Securifera, Inc 

All rights reserved. 

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
	this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
	this list of conditions and the following disclaimer in the documentation 
	and/or other materials provided with the distribution.

    * Neither the name of Securifera, Inc nor the names of its contributors may be 
	used to endorse or promote products derived from this software without specific
	prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

================================================================================

Pwnbrew is provided under the 3-clause BSD license above.

The copyright on this package is held by Securifera, Inc

*/


/*
 * GenericProgressDialog.java
 *
 * Created on June 25, 2013, 10:23 PM
 */

package pwnbrew.generic.gui;

import java.awt.FontMetrics;
import java.text.BreakIterator;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import pwnbrew.misc.ProgressDriver;
import pwnbrew.misc.ProgressListener;


/**
 *
 *  
 */
public class GenericProgressDialog extends JDialog implements ProgressListener {
  
  private final ProgressDriver theProgressOwner;
  private final List<?> theObjectList;
  private volatile String retValue = null;
 
  public GenericProgressDialog(javax.swing.JDialog parent, String message, ProgressDriver theOwner, 
          boolean isIndeterminate, List<?> passedList) {

        super(parent,"Please Wait....",true);

        initComponents();

        theProgressOwner = theOwner;
        
        //Pass the list of objects to be worked on
        //This was done so that each IProgressListener doesn't have to use
        //globals to access the data it wanted progress for
        theObjectList = passedList;

        wrapTextToLabel(theMessage, new String[]{message});

        if(!isIndeterminate){
           theProgressBar.setStringPainted(true);
        }

        theProgressBar.setIndeterminate(isIndeterminate);
        setLocationRelativeTo( parent );

    }

    private static void wrapTextToLabel(JLabel label, String[] text) {

       // measure the length of font in pixel
       FontMetrics fm = label.getFontMetrics(label.getFont());
       int contWidth = label.getParent().getWidth();

       // to find the word separation
       BreakIterator boundary = BreakIterator.getWordInstance();
       StringBuilder m = new StringBuilder("<html>");

       // loop each index of array
       for(String str : text) {
          boundary.setText(str);

          // save each line
          StringBuffer line = new StringBuffer();
          StringBuffer par = new StringBuffer();
          int start = boundary.first();

          // wrap loop
          for(int end = boundary.next(); end != BreakIterator.DONE; start = end, end = boundary.next()) {
             String word = str.substring(start,end);
             line.append(word);

             // compare width with font metrics
             int trialWidth = SwingUtilities.computeStringWidth(fm, line.toString());
             // if bigger, add new line
             if(trialWidth > contWidth) {
                line = new StringBuffer(word);
                par.append("<br />");
             }

             // add new word to paragraphs
             par.append(word);
          }

          par.append("<br />");
          m.append(par);
       }

       m.append("</html>");
       label.setText(m.toString());
    }

  
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        theProgressBar = new javax.swing.JProgressBar();
        theMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Please Wait......");
        setMinimumSize(new java.awt.Dimension(236, 66));
        setModal(true);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setName("Progress"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        theMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        theMessage.setText("Test");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(theMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(theProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(theMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(theProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        final GenericProgressDialog theDialog = this;
      
        SwingWorker theSwingWorker = new SwingWorker(){
            @Override
            public Void doInBackground() {
               retValue = theProgressOwner.executeFunction( theDialog, theObjectList );
               dispose();
               return null;
            }
        };
        theSwingWorker.execute();
    }//GEN-LAST:event_formWindowOpened


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel theMessage;
    private javax.swing.JProgressBar theProgressBar;
    // End of variables declaration//GEN-END:variables

    //===============================================================
    /**
    * Update the progress bar
    *
     * @param msgId
    * @param progress
    */
    @Override
    public void progressChanged(int msgId, int progress) {
        theProgressBar.setValue(progress);
    }

    //===============================================================
    /**
    * Gets the return value
     * @return 
    */
    public String getReturn() {
        return retValue;
    }

}
