/*

Copyright (C) 2013-2014, Securifera, Inc 

All rights reserved. 

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
	this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
	this list of conditions and the following disclaimer in the documentation 
	and/or other materials provided with the distribution.

    * Neither the name of Securifera, Inc nor the names of its contributors may be 
	used to endorse or promote products derived from this software without specific
	prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

================================================================================

Pwnbrew is provided under the 3-clause BSD license above.

The copyright on this package is held by Securifera, Inc

*/


/*
 * AttributeList.java
 *
 * Created on July 20, 2013, 10:41:31 AM
 */

package pwnbrew.xml;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

/**
 *
 *  
 */
public class AttributeCollection extends XmlObject {

    private final LinkedList<String> stringList = new LinkedList<>();

    //===============================================================
    /**
     *  Constructor
    */
    public AttributeCollection(){

    }

    //===============================================================
    /**
     *  Constructor
     * @param passedName
     * @param passedCmdArr
    */
   public AttributeCollection(String passedName, String[] passedCmdArr) {

      //Set the name and add the array to the list
      setName(passedName);
      if(passedCmdArr != null){
         stringList.addAll(Arrays.asList(passedCmdArr));
      }

   }

   // ==========================================================================
   /**
    * Generates the XML start tag for this object and appends it to the given {@link StringBuilder}.
    * <p>
    * In the XML generated by this method, each attribute represents a {@link Field}
    * of this {@code XmlObject}.
    *
    * @param stringBuilder the {@link StringBuilder} to which the XML data is to
    * be appended
    *
    * @throws IllegalArgumentException if the argument is null
   */
   @Override
   protected void appendXmlStartTag( StringBuilder stringBuilder ) {

      if( stringBuilder == null ) { //If the StringBuilder is null...
        throw new IllegalArgumentException( "The StringBuilder cannot be null." );
      }

      //Begin the start tag with the class name...
      stringBuilder.append( "<" ).append( this.getClass().getSimpleName() );

      //Add the attributes...
      String value;
      for( String name : thePropertyMap.keySet() ) { //For each attribute name...
         value = thePropertyMap.get( name ); //Get the value mapped to the name
         if( value != null ) { //If a value was obtained...

            stringBuilder.append( " " ); //Add a space
            stringBuilder.append( name ); //Add the attribute name
            stringBuilder.append( "=\"" ); //Add the equals sign and open quote
            stringBuilder.append( XmlUtilities.encode( value ) ); //Add the value
            stringBuilder.append( "\"" ); //Add the close quote

          } else { //If no value was obtained...
            //The attribute name/value pair was not added (or was removed) from the
            //  attribute HashMap.
            //Error?
          }

      }

      String name = getName();
      for( int i = 0; i < stringList.size(); i++ ) { //For each attribute name...
         value = stringList.get( i ); //Get the value mapped to the name
         if( value != null ) { //If a value was obtained...

            stringBuilder.append( " " ); //Add a space
            stringBuilder.append( name ).append("_").append(i); //Add the attribute name
            stringBuilder.append( "=\"" ); //Add the equals sign and open quote
            stringBuilder.append( XmlUtilities.encode( value ) ); //Add the value
            stringBuilder.append( "\"" ); //Add the close quote

          } else { //If no value was obtained...
            //The attribute name/value pair was not added (or was removed) from the
            //  attribute HashMap.
            //Error?
          }

      }

      stringBuilder.append( ">" ); //End the start tag

   }/* END appendXmlStartTag( StringBuilder ) */

   // ==========================================================================
   /**
    * Generates the XML start tag for this object and writes it to the given {@link RandomAccessFile}.
    * <p>
    * In the XML generated by this method, each attribute represents a {@link Field}
    * of this {@code XmlObject}.
    *
    * @param passedFile the {@link RandomAccessFile} to which the XML data is to
    * be written
     * @param isOneLiner
     * @throws java.io.IOException
    *
    * @throws IllegalArgumentException if the argument is null
   */
   @Override
   protected void writeXmlStartTag( RandomAccessFile passedFile, boolean isOneLiner ) throws IOException {

      if( passedFile == null ) { //If the StringBuilder is null...
        throw new IllegalArgumentException( "The StringBuilder cannot be null." );
      }

      StringBuilder stringBuilder = new StringBuilder();
      //Begin the start tag with the class name...
      stringBuilder.append( "<" ).append( this.getClass().getSimpleName() );

      //Add the attributes...
      String value;
      for( String name : thePropertyMap.keySet() ) { //For each attribute name...
         value = thePropertyMap.get( name ); //Get the value mapped to the name
         if( value != null ) { //If a value was obtained...

            stringBuilder.append( " " ); //Add a space
            stringBuilder.append( name ); //Add the attribute name
            stringBuilder.append( "=\"" ); //Add the equals sign and open quote
            stringBuilder.append( XmlUtilities.encode( value ) ); //Add the value
            stringBuilder.append( "\"" ); //Add the close quote

          } else { //If no value was obtained...
            //The attribute name/value pair was not added (or was removed) from the
            //  attribute HashMap.
            //Error?
          }

      }

      String name = getName();
      for( int i = 0; i < stringList.size(); i++ ) { //For each attribute name...
         value = stringList.get( i ); //Get the value mapped to the name
         if( value != null ) { //If a value was obtained...

            stringBuilder.append( " " ); //Add a space
            stringBuilder.append( name ).append("_").append(i); //Add the attribute name
            stringBuilder.append( "=\"" ); //Add the equals sign and open quote
            stringBuilder.append( XmlUtilities.encode( value ) ); //Add the value
            stringBuilder.append( "\"" ); //Add the close quote

    
          } else { //If no value was obtained...
            //The attribute name/value pair was not added (or was removed) from the
            //  attribute HashMap.
            //Error?
          }

      }

      //Change the start tag to a one-line element...
      if(isOneLiner){
         stringBuilder.append( "/>" ); //Add the one-line terminator "/>"
      } else {
         stringBuilder.append( ">" ); //End the start tag
      }
      passedFile.write(stringBuilder.toString().getBytes("US-ASCII"));

   }/* END appendXmlStartTag( StringBuilder ) */


   // ================================================================
    /**
    *
   */
   @Override
   public synchronized void setProperty( String name, String value ) {

      //NOTE: The condition below ensures this method will not add attributes.
      if( thePropertyMap.get( name ) != null ){ //If the key is already in the map...
         thePropertyMap.put( name, ( value != null ? value : "" ) ); //Set the value of the attribute
      } else {
         stringList.add(value);
      }

   }

    
    // ================================================================
    /**
    * Get string list
     * @return 
    */
    public LinkedList<String> getCollection( ) {
        synchronized(stringList){
            return new LinkedList<>(stringList);
        }
    }
    
    // ================================================================
    /**
    * Get string list
     * @param passedList
    */
    public void setCollection( List<String> passedList ) {
        synchronized(stringList){
            stringList.clear();
            stringList.addAll( passedList );
        }
    }
   
    // ================================================================
    /**
    * Get string list
     * @param anItem
    */
    public void addToCollection(  String anItem ) {
        synchronized(stringList){
            stringList.add(anItem);
        }
    }
    
     // ================================================================
    /**
    * Get string list
     * @param anItem
    */
    public void removeFromCollection(  String anItem ) {
        synchronized(stringList){
            stringList.remove(anItem);
        }
    }

    // ================================================================
    /**
    *   Get the String at the index
     * @param passedIndex
     * @return 
    */
    public String getStringAt( int passedIndex ) {
        
        String aString = null;
        synchronized(stringList){
            if( stringList.size() > passedIndex ){
                aString = stringList.get( passedIndex );
            }
        }
        return aString;
    }
}
