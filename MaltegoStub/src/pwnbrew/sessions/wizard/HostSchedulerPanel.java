/*

Copyright (C) 2013-2014, Securifera, Inc 

All rights reserved. 

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
	this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
	this list of conditions and the following disclaimer in the documentation 
	and/or other materials provided with the distribution.

    * Neither the name of Securifera, Inc nor the names of its contributors may be 
	used to endorse or promote products derived from this software without specific
	prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

================================================================================

Pwnbrew is provided under the 3-clause BSD license above.

The copyright on this package is held by Securifera, Inc

*/

package pwnbrew.sessions.wizard;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.security.SecureRandom;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.swing.*;
import pwnbrew.misc.Constants;
import pwnbrew.sessions.HostCheckInList;
import pwnbrew.sessions.HostCheckInListListener;
import pwnbrew.sessions.HostCheckInListModel;

/**
 *
 *  
 */
public final class HostSchedulerPanel extends HostCheckInWizardPanel implements HostCheckInListListener {
    
    private static final int DEFAULT_START_HOUR = 8;
    private static final int DEFAULT_END_HOUR = 17;
    
    private final static int maximumTime = 3600;
    private final SecureRandom aSR = new SecureRandom();

    
    //===============================================================
    /**
     *  Constructor
     * @param passedWizard
    */
    public HostSchedulerPanel(HostCheckInWizard passedWizard ) {
        super("Host Scheduling Panel", passedWizard);
        initComponents();
                
        initializeComponents();
        setupLayout();
    }
   
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkInPane = new javax.swing.JScrollPane();
        checkInTimeList = new HostCheckInList( this );
        schedulePanel = new javax.swing.JPanel();
        permTimePanel = new javax.swing.JPanel();
        hourLabel = new javax.swing.JLabel();
        minuteLabel = new javax.swing.JLabel();
        startLabel = new javax.swing.JLabel();
        endLabel = new javax.swing.JLabel();
        startHourSpinner = new javax.swing.JSpinner();
        endHourSpinner = new javax.swing.JSpinner();
        startMinSpinner = new javax.swing.JSpinner();
        endMinSpinner = new javax.swing.JSpinner();
        genButton = new javax.swing.JButton();
        freqLabel = new javax.swing.JLabel();
        occurLabel = new javax.swing.JLabel();
        freqCombo = new javax.swing.JComboBox();
        occurSpinner = new javax.swing.JSpinner();

        checkInPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Check-In Times", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        checkInPane.setViewportView(checkInTimeList);

        schedulePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Schedule Assistant", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        permTimePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Permitted Time Range"));

        hourLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hourLabel.setText("Hour");

        minuteLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        minuteLabel.setText("Minute");

        startLabel.setText("Start Time:");

        endLabel.setText("End Time:");

        startHourSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));
        startHourSpinner.setMinimumSize(new java.awt.Dimension(40, 20));
        startHourSpinner.setPreferredSize(new java.awt.Dimension(40, 20));

        endHourSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));
        endHourSpinner.setMinimumSize(new java.awt.Dimension(40, 20));
        endHourSpinner.setPreferredSize(new java.awt.Dimension(40, 20));

        startMinSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        startMinSpinner.setMinimumSize(new java.awt.Dimension(40, 20));
        startMinSpinner.setPreferredSize(new java.awt.Dimension(40, 20));

        endMinSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        endMinSpinner.setMinimumSize(new java.awt.Dimension(40, 20));
        endMinSpinner.setPreferredSize(new java.awt.Dimension(40, 20));

        javax.swing.GroupLayout permTimePanelLayout = new javax.swing.GroupLayout(permTimePanel);
        permTimePanel.setLayout(permTimePanelLayout);
        permTimePanelLayout.setHorizontalGroup(
            permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(permTimePanelLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                    .addComponent(endLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startHourSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hourLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(endHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startMinSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(endMinSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minuteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        permTimePanelLayout.setVerticalGroup(
            permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(permTimePanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hourLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minuteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(permTimePanelLayout.createSequentialGroup()
                        .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startMinSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(endHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endMinSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(permTimePanelLayout.createSequentialGroup()
                        .addComponent(startLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        genButton.setText("Generate");
        genButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genButtonActionPerformed(evt);
            }
        });

        freqLabel.setText("Frequency:");

        occurLabel.setText("Occurences:");

        freqCombo.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        freqCombo.setRenderer( new pwnbrew.generic.gui.DefaultCellBorderRenderer(BorderFactory.createEmptyBorder(0, 4, 0, 0)));

        occurSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 1000, 1));
        occurSpinner.setMinimumSize(new java.awt.Dimension(40, 20));
        occurSpinner.setPreferredSize(new java.awt.Dimension(40, 20));

        javax.swing.GroupLayout schedulePanelLayout = new javax.swing.GroupLayout(schedulePanel);
        schedulePanel.setLayout(schedulePanelLayout);
        schedulePanelLayout.setHorizontalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(genButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(schedulePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(freqLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(occurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(freqCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(occurSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(permTimePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        schedulePanelLayout.setVerticalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(permTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(schedulePanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(occurSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(occurLabel)))
                    .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(freqLabel)
                        .addComponent(freqCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(genButton)
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkInPane, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(schedulePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(schedulePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkInPane, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void genButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genButtonActionPerformed
        try {
            generateCheckInTimes();
        } catch (ParseException ex) {
            ex = null;
        }
    }//GEN-LAST:event_genButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane checkInPane;
    private javax.swing.JList checkInTimeList;
    private javax.swing.JSpinner endHourSpinner;
    private javax.swing.JLabel endLabel;
    private javax.swing.JSpinner endMinSpinner;
    private javax.swing.JComboBox freqCombo;
    private javax.swing.JLabel freqLabel;
    private javax.swing.JButton genButton;
    private javax.swing.JLabel hourLabel;
    private javax.swing.JLabel minuteLabel;
    private javax.swing.JLabel occurLabel;
    private javax.swing.JSpinner occurSpinner;
    private javax.swing.JPanel permTimePanel;
    private javax.swing.JPanel schedulePanel;
    private javax.swing.JSpinner startHourSpinner;
    private javax.swing.JLabel startLabel;
    private javax.swing.JSpinner startMinSpinner;
    // End of variables declaration//GEN-END:variables

    //===============================================================
     /**
      *  Organizes the GUI components on the screen
     */
    @Override
    public  void setupLayout() {
        
        javax.swing.GroupLayout permTimePanelLayout = new javax.swing.GroupLayout(permTimePanel);
        permTimePanel.setLayout(permTimePanelLayout);
        permTimePanelLayout.setHorizontalGroup(
            permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(permTimePanelLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                    .addComponent(endLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startHourSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hourLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(endHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startMinSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(endMinSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minuteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        permTimePanelLayout.setVerticalGroup(
            permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(permTimePanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hourLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minuteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(permTimePanelLayout.createSequentialGroup()
                        .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startMinSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(permTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(endHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endMinSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(permTimePanelLayout.createSequentialGroup()
                        .addComponent(startLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        
        javax.swing.GroupLayout schedulePanelLayout = new javax.swing.GroupLayout(schedulePanel);
        schedulePanel.setLayout(schedulePanelLayout);
        schedulePanelLayout.setHorizontalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(freqLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(occurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(freqCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(occurSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(genButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(permTimePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        schedulePanelLayout.setVerticalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(permTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(schedulePanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(occurSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(occurLabel)))
                    .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(freqLabel)
                        .addComponent(freqCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(genButton)
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(innerListPanel);
        innerListPanel.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(checkInPane, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(schedulePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(schedulePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkInPane, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        
        super.setupLayout();
     
    }
    
    //===============================================================
     /**
      *  Organizes the GUI components on the screen
    */
    private void initializeComponents() {

        startHourSpinner.setValue( DEFAULT_START_HOUR );
        endHourSpinner.setValue( DEFAULT_END_HOUR );
        
        //Add the time freq
        TimeFreq[] theFreqArr = new TimeFreq[ ]{ new TimeFreq(TimeFreq.HOURLY),  new TimeFreq(TimeFreq.DAILY), new TimeFreq(TimeFreq.WEEKLY), new TimeFreq(TimeFreq.MONTHLY) };
        freqCombo.setModel(new javax.swing.DefaultComboBoxModel( theFreqArr ));
        
        addListListeners();
  
    }
    
    //==============================================================
    /**
    *  Adds a mouse and keyboard listener to the check in list.
    */
    private void addListListeners() {

        MouseListener ml = new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                int index = checkInTimeList.locationToIndex(e.getPoint());
                if(e.getButton() == MouseEvent.BUTTON3 && e.getClickCount() == 1){
                    if(checkInTimeList.isSelectedIndex(index) && checkInTimeList instanceof HostCheckInList )
                        ((HostCheckInList)checkInTimeList).doPopupMenuLogic(e);                
                }

            } // end MouseReleased
        }; // end MouseAdapter class
        checkInTimeList.addMouseListener(ml);
        
        
        KeyListener keyListener = new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if(e.getKeyChar() == KeyEvent.VK_DELETE || Character.toUpperCase((char)e.getKeyChar()) == 'D')
                    removeCheckInDates();
            
            }
        }; // end MouseAdapter class
        checkInTimeList.addKeyListener(keyListener);

    }   
     
    //===============================================================
    /**
     * 
     * @return 
     */
    public List<String> getCheckInDates(){
        DefaultListModel theModel = (DefaultListModel) checkInTimeList.getModel();
        return Collections.list( theModel.elements() );
    }
    
    //==========================================================================
    /**
     *  Remove the time from the list
     *
    */
    @Override
    public void removeCheckInDates() {

        List<String> theDatesToRemove = new ArrayList<>(checkInTimeList.getSelectedValuesList());
        DefaultListModel theModel = (DefaultListModel)checkInTimeList.getModel();
        
        //Remote the dates
        for( String aStr : theDatesToRemove )
            theModel.removeElement(aStr);                    
        
    }

    //==========================================================================
    /**
     *  Generates check-in times based on the scheduling assistant. 
    */
    private void generateCheckInTimes() throws ParseException {
        
        int numToGen = (Integer)occurSpinner.getValue();
        SimpleDateFormat aSdf = Constants.DEFAULT_DATE_FORMAT;
        DefaultListModel theModel = (DefaultListModel)checkInTimeList.getModel();
                
        //Get the white listed times
        int startHour = (Integer)startHourSpinner.getValue();
        int startMinute = (Integer)startMinSpinner.getValue();        
        int endHour = (Integer)endHourSpinner.getValue();        
        int endMinute = (Integer)endMinSpinner.getValue();       
        
        //Convert to absolute times
        int startTime = startHour * 60 + startMinute;
        int endTime = endHour * 60 + endMinute;
        
        //Get the frequency
        TimeFreq freqObj = (TimeFreq)freqCombo.getSelectedItem();
        
        //Get the current date
        Calendar theCalendar = Calendar.getInstance();
        Date currentDate;
        if( theModel.isEmpty() ){
            currentDate = new Date();
        } else {
            String currentDateStr = (String)theModel.get( theModel.size() - 1 );  
            currentDate = Constants.DEFAULT_DATE_FORMAT.parse(currentDateStr);
        }
        
        //Set the time
        theCalendar.setTime( currentDate );  
        
        //If the freq is hourly then make sure the start time is after the current time
        int theFreq = freqObj.getType();            
        if( theFreq != TimeFreq.HOURLY ){
   
            //Calculate the range
            int range;
            if( endTime >= startTime ){

                range = endTime - startTime;

            } else {

                //If the start time is greater than the stop time then the range is
                //start to max and min to end
                range = maximumTime - startTime;
                range += endTime;

            }

            //Generate some dates
            for( int i = 0; i < numToGen; i++ ){

                //Get the random num
                float rand = aSR.nextFloat();
                int theRand = (int)(rand * range);

                //Get the new absolute time
                int newTime = theRand + startTime;
                if( newTime > maximumTime )
                    newTime -= maximumTime;
                
                //Convert to hour and second
                int newHour = newTime / 60;
                int newMin = newTime % 60;    

                //Everything but hourly
                theCalendar.set( Calendar.HOUR_OF_DAY, newHour);
                theCalendar.set( Calendar.MINUTE, newMin);
                theCalendar.add( theFreq, 1);
                
                //Add the time
                String aDate = aSdf.format( theCalendar.getTimeInMillis());
                theModel.addElement(aDate);
            }
            
        } else {
            
            int currHour = theCalendar.get( Calendar.HOUR_OF_DAY );
            int currSecond = theCalendar.get( Calendar.MINUTE );
            
            int currTime = currHour * 60 + currSecond;
            //If the current time is later than the start time then set start to current
//            if( currTime > startTime){
//                startHour = currTime / 60;
//                startMinute = currTime % 60;
//            }
            
            
            //Go to the next day
             //Generate some dates
            for( int i = 0; i < numToGen; i++ ){

                if( currTime + 60 > endTime ){
                    theCalendar.add( Calendar.DAY_OF_YEAR, 1);
                    theCalendar.set( Calendar.HOUR_OF_DAY, startHour);
                    theCalendar.set( Calendar.MINUTE, startMinute);
                } else 
                    theCalendar.add( theFreq, 1);
                
                
                //Add the time
                String aDate = aSdf.format( theCalendar.getTimeInMillis());
                theModel.addElement(aDate);

                //Update time
                currHour = theCalendar.get( Calendar.HOUR_OF_DAY );
                currSecond = theCalendar.get( Calendar.MINUTE );
                currTime = currHour * 60 + currSecond;
            
            }
        }     
        
        
        
    }

    //==========================================================================
    /**
     *  Remove the check in time
     * 
     * @param theFirstStr 
     */
    public void removeCheckInDate(String theFirstStr) {
        HostCheckInListModel theModel = (HostCheckInListModel) checkInTimeList.getModel();
        theModel.removeElement(theFirstStr );
    }

    //=========================================================================
    /**
     *  Replaces one date with the other
     * @param oldDate
     * @param newDate
     */
    @Override
    public void replaceDate(String oldDate, String newDate){
       
        //Replace and refresh
        HostCheckInListModel theModel = (HostCheckInListModel) checkInTimeList.getModel();
        theModel.removeElement(oldDate);
        
        //Add the new one and sort it
        theModel.addElement(newDate);
        Collections.sort( Collections.list( theModel.elements()));
        
    }
    
    //===============================================================
    /**
     *  Inner class for specifying the time freq.
    */
    private class TimeFreq {
        
        public static final int HOURLY = Calendar.HOUR_OF_DAY;
        public static final int DAILY = Calendar.DAY_OF_YEAR;
        public static final int WEEKLY = Calendar.WEEK_OF_YEAR;
        public static final int MONTHLY = Calendar.MONTH;
        
        private static final String HOURLY_STR = "Hourly";
        private static final String DAILY_STR = "Daily";
        private static final String WEEKLY_STR = "Weekly";
        private static final String MONTHLY_STR = "Monthly";

        private final int theType;
        
        //===============================================================
        /**
         *  Constructor
        */
        public TimeFreq( int passedType ) {
            theType = passedType;
        }  

        //===============================================================
        /**
         *  Returns the type
         * 
         * @return 
         */
        public int getType() {
            return theType;
        }
        
        //===============================================================
        /**
         *  Return the String representation of this object
         * 
         * @return 
        */
        @Override
        public String toString(){
            
            String retStr;
            switch( theType ){
                case HOURLY:
                    retStr = HOURLY_STR;
                    break;
                case DAILY:
                    retStr = DAILY_STR;
                    break;
                case WEEKLY:
                    retStr = WEEKLY_STR;
                    break;
                case MONTHLY:
                    retStr = MONTHLY_STR;
                    break;
                default:
                    retStr = "";
                    break;
                        
            }
            return retStr;
        }
    }
    
}
