/*

Copyright (C) 2013-2014, Securifera, Inc 

All rights reserved. 

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
	this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
	this list of conditions and the following disclaimer in the documentation 
	and/or other materials provided with the distribution.

    * Neither the name of Securifera, Inc nor the names of its contributors may be 
	used to endorse or promote products derived from this software without specific
	prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

================================================================================

Pwnbrew is provided under the 3-clause BSD license above.

The copyright on this package is held by Securifera, Inc

*/

package pwnbrew.shell;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Executor;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SpinnerModel;
import javax.swing.SwingConstants;
import pwnbrew.generic.gui.ValidTextField;
import pwnbrew.misc.Constants;
import pwnbrew.misc.StandardValidation;

/**
 *
 *  
 */
@SuppressWarnings("ucd")
public class ShellJPanel extends javax.swing.JPanel {

    private final ShellJPanelListener theListener;   
    private JFileChooser theFileChooser = null;
    private Dimension prevDim = null;
        
    //===============================================================
    /**
     * Constructor
     * @param passedListener
     */
    public ShellJPanel( ShellJPanelListener passedListener ) {
        
        theListener = passedListener;
        initComponents();
        initializeComponents();
                 
    }
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shellScrollPane = new javax.swing.JScrollPane();
        openButton = new javax.swing.JButton();
        shellCombo = new javax.swing.JComboBox();
        fontSizeSpinner = new javax.swing.JSpinner();
        fontLabel = new javax.swing.JLabel();
        cmdLabel = new javax.swing.JLabel();
        cmdTextField = new ValidTextField();

        shellScrollPane.setBorder(null);
        shellScrollPane.setPreferredSize(new java.awt.Dimension(472, 472));

        openButton.setText("Open Shell");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        shellCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shellComboActionPerformed(evt);
            }
        });

        fontSizeSpinner.setBorder(null);
        fontSizeSpinner.setInheritsPopupMenu(true);
        fontSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fontSizeSpinnerStateChanged(evt);
            }
        });

        fontLabel.setText("Font Size:");

        cmdLabel.setText("Command:");

        cmdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmdTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(shellScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fontLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmdTextField)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fontSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                                .addComponent(shellCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(openButton)))))
                .addGap(8, 8, 8))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(shellScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(shellCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(openButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fontLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fontSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        
        if(openButton.getText().equals("Open Shell")){            
             
            SpinnerModel aSP = fontSizeSpinner.getModel();
            Integer strVal  = (Integer) aSP.getValue();
            
            //Spawn the shell
            ClassWrapper aClassWrapper = (ClassWrapper)shellCombo.getSelectedItem();            
            try {
                
                Constructor aConstructor = aClassWrapper.theClass.getConstructor( Executor.class, ShellListener.class );
                Shell theShell = (Shell)aConstructor.newInstance( Constants.Executor, (ShellListener)theListener);
                Component shellView = theShell.createView();
                
                //Enabled, set font, and request focus
                shellView.setEnabled( true );       

                Font font = new Font("Courier New", Font.PLAIN, strVal);
                shellView.setFont(font);  
                
                //Set the view for the current shell
                setShellView(shellView);
                theShell.windowResized( shellScrollPane.getViewport().getWidth(), shellScrollPane.getViewport().getHeight(), 0, 0 );
                shellView.requestFocusInWindow();
                theListener.setShell( theShell);
                
                //Start the shell
                theShell.start(); 
                
            } catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException ex) {
                ex.printStackTrace();
            }
                                    
            //Set to stop shell
            openButton.setText("Kill Shell");
            
        } else
            disablePanel( true );

    }//GEN-LAST:event_openButtonActionPerformed

    private void fontSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fontSizeSpinnerStateChanged
    
        Component thePane = getShellView();
        if( thePane != null ){
            Integer strVal = (Integer) fontSizeSpinner.getModel().getValue();
            Font font = new Font("Courier New", Font.PLAIN, strVal);
            thePane.setFont(font);
        }
    }//GEN-LAST:event_fontSizeSpinnerStateChanged

    private void shellComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shellComboActionPerformed
        
        boolean showCustom = false;
        ClassWrapper aCW = (ClassWrapper) shellCombo.getSelectedItem();
        if( aCW.theClass.equals( Custom.class )){
            showCustom = true;   
            
            String[] cmdArr = Custom.CMD_EXE_STR;
            String cmd = Arrays.toString( cmdArr );
            cmdTextField.setText( cmd );
        }
                
        cmdLabel.setVisible(showCustom);
        cmdTextField.setVisible(showCustom);
        
        JFrame parentFrame = theListener.getParentJFrame();
        if( parentFrame != null )
            parentFrame.pack();
    }//GEN-LAST:event_shellComboActionPerformed

    private void cmdTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdTextFieldKeyReleased
        if( ((ValidTextField)cmdTextField).isDataValid() ){
            
            String[] retArr = null;
            String retStr = cmdTextField.getText();
            retStr = retStr.substring(1, retStr.length()-1);
            
            //Create an array from the string
            int pos = retStr.indexOf("\"");
            if( pos == -1 ){
                retArr = retStr.split(",");
            } else {
                StringBuilder aSB = new StringBuilder(retStr);                
                ArrayList<String> aList = new ArrayList<>();
                retArr = aList.toArray( new String[aList.size()]);
            }
            
            
            Custom.setCommandStringArray( retArr );
        }
    }//GEN-LAST:event_cmdTextFieldKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cmdLabel;
    private javax.swing.JTextField cmdTextField;
    private javax.swing.JLabel fontLabel;
    private javax.swing.JSpinner fontSizeSpinner;
    private javax.swing.JButton openButton;
    private javax.swing.JComboBox shellCombo;
    private javax.swing.JScrollPane shellScrollPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets gui component for the shell
     * @param shellPane
    */
    public void setShellView( Component shellPane ) {
        if(shellPane != null)
           shellScrollPane.setViewportView( shellPane );
        
    }
    
    //===============================================================
    /**
     *  Disable the shell panel
     * @param passedBool boolean for whether to send a kill message to the client
     */
    public void disablePanel( boolean passedBool ){
        
        //Disable it
        JPanel newPanel = new JPanel();        
        newPanel.setEnabled( false );
        setShellView( newPanel);

        //Kill the shell
        if( passedBool )
            theListener.killShell();

         //Set to stop shell
        openButton.setText("Open Shell");
    }
    
    //===============================================================
    /**
     * Returns the runner text pane
     *
     * @return 
    */
    public Component getShellView() {
        return shellScrollPane.getViewport().getView();
    }

    //===============================================================
    /**
     *  Initialize the panel components
     */
    private void initializeComponents() {
        
        setBackground(new Color(235,235,230));
        
        theFileChooser = new JFileChooser();
        theFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        theFileChooser.setMultiSelectionEnabled( true ); //Let the user select multiple files
        
        SpinnerModel aSP = fontSizeSpinner.getModel();
        aSP.setValue(14);
       
        JPanel blankPanel = new JPanel();
        blankPanel.setEnabled( false );
        setShellView( blankPanel );
        
        //Add listener for resize event
        shellScrollPane.addComponentListener( new ComponentAdapter(){
            @Override
            public void componentResized(ComponentEvent e){
                Shell theShell = theListener.getShell();
                if( theShell != null ){                                            
                    Dimension nextDim = e.getComponent().getSize();
                    if( prevDim != null){
                        if( prevDim.height != nextDim.height || prevDim.width != nextDim.width )
                            theShell.windowResized(nextDim.width,nextDim.height, prevDim.width, prevDim.height );
                    } else {
                        theShell.windowResized(nextDim.width,nextDim.height, 0, 0 );
                    }
                    prevDim = nextDim;                            
                }
            }        
        });
        
        //Add the command prompt
        List<Class> shellList = theListener.getShellList();
        for( Class aClass : shellList )
            shellCombo.addItem( new ClassWrapper( aClass ) );
        
        //Center the items
        ((JLabel)shellCombo.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
       
        //Set validation
        ((ValidTextField)cmdTextField).setValidation( StandardValidation.KEYWORD_CommandArray );
           
    } 
    
    //=======================================================================
    /**
     * Internal class for populating the shell combobox
     */
    class ClassWrapper {
        
        public final Class theClass;
        
        public ClassWrapper( Class passedClass ){
            theClass = passedClass;
        }
              
        @Override
        public String toString(){
            return theClass.getSimpleName();
        }
    }

}
