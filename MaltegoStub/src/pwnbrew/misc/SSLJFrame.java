/*

Copyright (C) 2013-2014, Securifera, Inc 

All rights reserved. 

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
	this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
	this list of conditions and the following disclaimer in the documentation 
	and/or other materials provided with the distribution.

    * Neither the name of Securifera, Inc nor the names of its contributors may be 
	used to endorse or promote products derived from this software without specific
	prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

================================================================================

Pwnbrew is provided under the 3-clause BSD license above.

The copyright on this package is held by Securifera, Inc

*/

package pwnbrew.misc;

import java.awt.Cursor;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.cert.Certificate;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import pwnbrew.log.LoggableException;

/**
 *
 * @author Securifera
 */
public class SSLJFrame extends javax.swing.JFrame {

    private JFileChooser theCertificateChooser = null;
    
    /**
     * Creates new form SSLJFrame
     */
    public SSLJFrame() {
        initComponents();
        
        theCertificateChooser = new JFileChooser();
        theCertificateChooser.setMultiSelectionEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        importButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        certPathTextField = new javax.swing.JTextField();
        certLabel = new javax.swing.JLabel();
        fileChooserButton = new javax.swing.JButton();
        certAliasTextField = new javax.swing.JTextField();
        certLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SSL Keystore Utility");

        importButton.setText("Import");
        importButton.setToolTipText("Import Public Key Certificate");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        exportButton.setText("Export");
        exportButton.setToolTipText("Export Public Key Certificate");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        certPathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                certPathTextFieldActionPerformed(evt);
            }
        });

        certLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        certLabel.setText("Certificate Path:");

        fileChooserButton.setText("...");
        fileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserButtonActionPerformed(evt);
            }
        });

        certAliasTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                certAliasTextFieldActionPerformed(evt);
            }
        });

        certLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        certLabel1.setText("Certificate Alias:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(certLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(certLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(certAliasTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(importButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportButton))
                    .addComponent(certPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(fileChooserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(certLabel)
                    .addComponent(certPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileChooserButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportButton)
                    .addComponent(importButton)
                    .addComponent(certAliasTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(certLabel1))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void certPathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_certPathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_certPathTextFieldActionPerformed

    private void fileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserButtonActionPerformed
        selectKeystorePath();
    }//GEN-LAST:event_fileChooserButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        
        setCursor( Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR) );
        try {
            
            String aStr = certPathTextField.getText();
            if( !aStr.isEmpty() ){
                File certFile = new File(aStr);
                if( certFile.exists()){

                    String theMessage = "The selected file exists. Would you like to overwrite it?";
                    int dialogValue = JOptionPane.showConfirmDialog(this, theMessage, "Replace file?", JOptionPane.YES_NO_OPTION);

                    //Add the JAR to utilities
                    if ( dialogValue == JOptionPane.NO_OPTION )
                        return;                  
                }                

                try {
                    //Pass the status up to the manager                
                    Certificate theCert = SSLUtilities.getCertificate();

                    //If a cert is returned then send it to the client
                    if(theCert != null){
                        byte[] certBytes = theCert.getEncoded();
                        try (FileOutputStream aFOS = new FileOutputStream(certFile)) {
                            aFOS.write(certBytes);
                            aFOS.flush();
                        }
                    }

                    JOptionPane.showMessageDialog(this, "Export Complete", "Export Complete", JOptionPane.INFORMATION_MESSAGE);

                } catch (IOException | KeyStoreException | LoggableException | CertificateEncodingException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }

            }
        } finally {
            setCursor( null );
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
         
        setCursor( Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR) );
        try {
            
            String aStr = certPathTextField.getText();
            if( !aStr.isEmpty() ){
                File certFile = new File(aStr);
                if( !certFile.exists()){                
                    String theMessage = "The selected file doesn't exists";
                    JOptionPane.showMessageDialog(this, theMessage, "File doesn't exists", JOptionPane.INFORMATION_MESSAGE);
                    return;                  
                }   
                                
                //Pass the status up to the manager
                try {
                    
                    String certAlias = certAliasTextField.getText();
                    if( !certAlias.isEmpty() ){

                        KeyStore aKeyStore = SSLUtilities.getKeystore();
                        if( SSLUtilities.checkAlias(aKeyStore, certAlias)){
                            String theMessage = "A certificate already exists with the given alias. Would you like to overwrite it?";
                            int dialogValue = JOptionPane.showConfirmDialog(this, theMessage, "Replace Certificate?", JOptionPane.YES_NO_OPTION);
                             
                            //Return if no is chosen
                            if ( dialogValue == JOptionPane.NO_OPTION )
                               return;    

                        }
                    }

                    //If a cert is returned then send it to the client                            
                    byte[] certBytes = new byte[(int)certFile.length()];
                    try (FileInputStream aFOS = new FileInputStream(certFile)) {
                        aFOS.read(certBytes);                              
                    }

                    //Create a cert from the bytes
                    Certificate aCert = new sun.security.x509.X509CertImpl( certBytes );
                    SSLUtilities.importCertificate( certAlias, aCert);

                    JOptionPane.showMessageDialog(this, "Import Complete", "Import Complete", JOptionPane.INFORMATION_MESSAGE);

                } catch( CertificateException | LoggableException | IOException | KeyStoreException ex ){
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } finally {
            setCursor( null );
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void certAliasTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_certAliasTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_certAliasTextFieldActionPerformed

     // ==========================================================================
    /**
    * Selects the keystore path via a {@link JFileChooser}.
    */
    private void selectKeystorePath() {

        File userSelectedFile = null;

        int returnVal = theCertificateChooser.showDialog( this, "Select Certificate File" ); //Show the dialogue
        switch( returnVal ) {

           case JFileChooser.CANCEL_OPTION: //If the user canceled the selecting...
              break;
           case JFileChooser.ERROR_OPTION: //If the dialogue was dismissed or an error occurred...
              break; //Do nothing

           case JFileChooser.APPROVE_OPTION: //If the user approved the selection...
              userSelectedFile = theCertificateChooser.getSelectedFile(); //Get the files the user selected
              break;
           default:
              break;

        }

        //Check if the returned file is valid
        if(userSelectedFile == null  || userSelectedFile.isDirectory())
           return;
        

        String userPath = userSelectedFile.getAbsolutePath();
        certPathTextField.setText(userPath);

    }/* END selectKeystorePath() */
    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField certAliasTextField;
    private javax.swing.JLabel certLabel;
    private javax.swing.JLabel certLabel1;
    private javax.swing.JTextField certPathTextField;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton fileChooserButton;
    private javax.swing.JButton importButton;
    // End of variables declaration//GEN-END:variables
}
